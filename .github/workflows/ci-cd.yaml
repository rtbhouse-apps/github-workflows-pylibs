name: "CI / CD"

on:
  workflow_call:
    inputs:
      docker-registry:
        description: "Docker registry"
        required: false
        default: "europe-west4-docker.pkg.dev"
        type: "string"
      docker-project-id:
        description: "Docker project id"
        required: false
        default: "rtbhouse-apps"
        type: "string"
      docker-repository-id:
        description: "Docker repository id"
        required: false
        default: "docker-pylibs"
        type: "string"
      docker-image-name:
        description: "Docker image name"
        required: true
        type: "string"
      context-dir:
        description: "Component context dir"
        required: false
        default: "."
        type: "string"
      component:
        description: "Component name"
        required: false
        default: "pylib"
        type: "string"
      ci-runs-on:
        description: "The machine on which the CI will be run"
        required: false
        default: "ubuntu-latest"
        type: "string"
      lib-repo-url:
        description: "Repository to put the library on publish"
        required: false
        default: "https://python.cloudsmith.io/rtbhouse-apps/rtbhouse-apps/"
        type: "string"
      lib-pip-url:
        description: "Address part of pip extra repo url"
        required: false
        default: "dl.cloudsmith.io/basic/rtbhouse-apps/rtbhouse-apps/python/simple/"
        type: "string"
      lib-repo-secret:
        description: "Secret that stores credentials to login to repository"
        required: false
        default: "CLOUDSMITH_APPS_BASIC_AUTH_CREDENTIALS"
        type: "string"
      

defaults:
  run:
    shell: "bash"

jobs:
  ci:
    name: "CI"
    runs-on: "${{ inputs.ci-runs-on }}"
    env:
      DOCKER_TAG: "${{ github.sha }}"
      DOCKER_IMAGE: "${{ inputs.docker-registry }}/${{ inputs.docker-project-id }}/${{ inputs.docker-repository-id }}/${{ inputs.docker-image-name }}"
    
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Set dev docker image metadata"
        id: "docker-metadata"
        uses: "docker/metadata-action@v3"
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ env.DOCKER_TAG }}

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"
          create_credentials_file: true

      - name: "Login to Docker Registry"
        uses: "docker/login-action@v1"
        with:
          registry: "${{ inputs.docker-registry }}"
          username: "oauth2accesstoken"
          password: "${{ steps.gcp-auth.outputs.access_token }}"

      - name: "Add uid and gid env vars"
        id: "set-uid-gid"
        run: |
          echo "::set-output name=uid::`id -u`"
          echo "::set-output name=gid::`id -g`"

      - name: "Build Docker image"
        id: build-docker-image
        uses: "docker/build-push-action@v2"
        with:
          context: "${{ inputs.context-dir }}"
          build-args: |
            UID=${{ steps.set-uid-gid.outputs.uid }}
            GID=${{ steps.set-uid-gid.outputs.gid }}
          push: false
          load: true
          tags: "${{ steps.docker-metadata.outputs.tags }}"
          labels: "${{ steps.docker-metadata.outputs.labels }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Lint"
        run: |
          if [ -f ${{ inputs.context-dir }}/bin/docker/lint.sh ]; then
            ${{ inputs.context-dir }}/bin/docker/lint.sh
          else
            echo "::warning::No lint has been defined for this repository"
          fi
          
      - name: "Get config"
        id: "get-config"
        run: |
          if [ -f ${{ inputs.context-dir }}/bin/docker/get_ci_config.sh ]; then
            ${{ inputs.context-dir }}/bin/docker/get_ci_config.sh
          else
            echo "::warning::No config been provided for CI for this repository"
          fi
        if: >
          success()
          || (failure()
            && steps.build-docker-image.conclusion == 'success')

      - name: "Test"
        run: |
          if [ -f ${{ inputs.context-dir }}/bin/docker/test.sh ]; then
            ${{ inputs.context-dir }}/bin/docker/test.sh
          else
            echo "::warning::No tests has been defined for this repository"
          fi
        if: >
          success()
          || (failure()
            && steps.get-config.conclusion == 'success')

  release-development-package:
    name: "Release development package"
    runs-on: "${{ inputs.ci-runs-on }}"
    if: "${{ !contains('refs/heads/master refs/heads/main', github.ref) }}"

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        poetry-version: ["1.1.13"]
    
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout release scripts"
        uses: "actions/checkout@v2"
        with:
          repository: "rtbhouse-apps/github-workflows-pylibs"
          ref: "master"
          path: "github-workflows-pylibs"

      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          path: "pylib"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v0"
        with:
          secrets: |-
            PYPI_RW_AUTH:projects/rtbhouse-apps/secrets/${{ inputs.lib-repo-secret }}

      - name: "Setup python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip"

       - name: "Install util packages"
        run: |
          pip install -r github-workflows-pylibs/requirements.txt

      - name: "Setup poetry ${{ matrix.poetry-version }}"
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ matrix.poetry-version }}
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: "Configure poetry"
        env:
          PYPI_RW_AUTH: "${{ steps.secrets.outputs.PYPI_RW_AUTH }}"
        run: |
          export LOGIN=`jq -r .login <<< $PYPI_RW_AUTH`
          export TOKEN=`jq -r .token <<< $PYPI_RW_AUTH`
          echo "PIP_EXTRA_INDEX_URL=https://${LOGIN}:${TOKEN}@${{ inputs.lib-pip-url }}" >> $GITHUB_ENV
          poetry config virtualenvs.in-project true
          poetry config repositories.rtbhouse-apps-publish ${{ inputs.lib-repo-url }}
          poetry config http-basic.rtbhouse-apps-publish ${LOGIN} ${TOKEN}

      - name: "Assert prod version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py assert-prod-version

      - name: Should publish package
        id: should-publish-package
        run: |
          cd pylib
          if output=$(python ../github-workflows-pylibs/pylib.py assert-version-available 2>&1); then
            echo ::set-output name=publish::1
          else
            if [[ $output == *"Package"*"already exists in repository"* ]]; then
              echo ::set-output name=publish::0
              echo "::warning::Package version in pyproject.toml not bumped, will not publish new package"
            else
              echo $output
              exit 1
            fi
          fi

      - name: "Set next dev version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py set-next-dev-version
        if: steps.should-publish-package.outputs.publish == 1

      - name: "Publish dev package"
        run: |
          cd pylib
          poetry publish --build --no-interaction --repository rtbhouse-apps-publish
        if: steps.should-publish-package.outputs.publish == 1


  release-final-package:
    name: "Release final package"
    runs-on: "${{ inputs.ci-runs-on }}"
    needs: "ci"
    if: "contains('refs/heads/master refs/heads/main', github.ref)"

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        poetry-version: ["1.1.13"]
    
    permissions:
      contents: "write"
      id-token: "write"

    steps:
      - name: "Checkout release scripts"
        uses: "actions/checkout@v2"
        with:
          repository: "rtbhouse-apps/github-workflows-pylibs"
          ref: "master"
          path: "github-workflows-pylibs"

      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          path: "pylib"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v0"
        with:
          secrets: |-
            PYPI_RO_TOKEN:projects/rtbhouse-apps/secrets/CLOUDSMITH_APPS_RO_TOKEN
            PYPI_RW_AUTH:projects/rtbhouse-apps/secrets/${{ inputs.lib-repo-secret }}

      - name: "Setup python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip"

      - name: "Setup poetry ${{ matrix.poetry-version }}"
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ matrix.poetry-version }}
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: "Configure poetry"
        env:
          PYPI_RW_AUTH: "${{ steps.secrets.outputs.PYPI_RW_AUTH }}"
        run: |
          export LOGIN=`jq -r .login <<< $PYPI_RW_AUTH`
          export TOKEN=`jq -r .token <<< $PYPI_RW_AUTH`
          echo "PIP_EXTRA_INDEX_URL=https://${LOGIN}:${TOKEN}@${{ inputs.lib-pip-url }}" >> $GITHUB_ENV
          poetry config virtualenvs.in-project true
          poetry config repositories.rtbhouse-apps-publish ${{ inputs.lib-repo-url }}
          poetry config http-basic.rtbhouse-apps-publish ${LOGIN} ${TOKEN}

      - name: "Install util packages"
        run: |
          pip install -r github-workflows-pylibs/requirements.txt

      - name: "Assert prod version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py assert-prod-version

      - name: Should publish package
        id: should-publish-package
        run: |
          cd pylib
          if output=$(python ../github-workflows-pylibs/pylib.py assert-version-available 2>&1); then
            echo ::set-output name=publish::1
          else
            if [[ $output == *"Package"*"already exists in repository"* ]]; then
              echo ::set-output name=publish::0
              echo "::warning::Package version in pyproject.toml not bumped, will not publish new package"
            else
              echo $output
              exit 1
            fi
          fi
      
      - name: Get version
        id: get-version
        run: |
          cd pylib
          echo ::set-output name=version::$(poetry version -s)
        if: steps.should-publish-package.outputs.publish == 1

      - name: "Publish final package"
        run: |
          cd pylib
          poetry publish --build --no-interaction --repository rtbhouse-apps-publish
        if: steps.should-publish-package.outputs.publish == 1

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: v${{ steps.get-version.outputs.version }}
        if: steps.should-publish-package.outputs.publish == 1
