name: "CI / CD"

on:
  workflow_call:
    inputs:
      ci-runs-on:
        description: "The machine on which the CI will be run"
        required: false
        default: "ubuntu-22.04"
        type: "string"
      publish-repository:
        description: "The repository to which the package will be published"
        required: false
        default: "rtbhouse-apps"
        type: "string"
      
defaults:
  run:
    shell: "bash"

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.1.14"

jobs:
  prepare:
    name: "Prepare"
    runs-on: "ubuntu-22.04"
    outputs:
      publish-repo-url: "${{ steps.choose-publish-repo.outputs.publish-repo-url }}"
      publish-repo-upload-url: "${{ steps.choose-publish-repo.outputs.publish-repo-upload-url }}"
      publish-repo-secret: "${{ steps.choose-publish-repo.outputs.publish-repo-secret }}"
      get-config: "${{ steps.should-get-config.outputs.get-config }}"
      perform-tests: "${{ steps.should-perform-tests.outputs.perform-tests }}"
      perform-lint: "${{ steps.should-perform-lint.outputs.perform-lint }}"
      docker-image-name: "${{ steps.get-docker-image-name.outputs.docker-image-name }}"

    steps:
      - name: "Choose publish repo"
        id: "choose-publish-repo"
        run: |
          if [[ "${{ inputs.publish-repository }}" == "rtbhouse-apps" ]]; then
            REPO_URL="https://{LOGIN}:{TOKEN}@dl.cloudsmith.io/basic/rtbhouse-apps/rtbhouse-apps/python/simple/"
            REPO_UPLOAD_URL="https://python.cloudsmith.io/rtbhouse-apps/rtbhouse-apps/"
            REPO_SECRET="CLOUDSMITH_APPS_BASIC_AUTH_CREDENTIALS"
          elif [[ "${{ inputs.publish-repository }}" == "rtbhouse-apps-internal" ]]; then
            REPO_URL=" https://py-registry.dev.apps.rtbhouse.biz/"
            REPO_UPLOAD_URL="${REPO_URL}"
            REPO_SECRET="PY_REGISTRY_APPS_CREDENTIALS"
          else
            echo "::error::Unknown publish repo ${{ inputs.publish-repository }}"
            exit 1
          fi

          echo "::set-output name=publish-repo-url::${REPO_URL}"
          echo "::set-output name=publish-repo-upload-url::${REPO_UPLOAD_URL}"
          echo "::set-output name=publish-repo-secret::${REPO_SECRET}"
      
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Should get config"
        id: "should-get-config"
        run: |
          if [ -f ./bin/ci/get_config.sh ]; then
            GET_CONFIG=1
          else
            GET_CONFIG=0
          fi
          echo "::set-output name=get-config::${GET_CONFIG}"

      - name: "Should perform tests"
        id: "should-perform-tests"
        run: |
          if [ -f ./bin/ci/test.sh ]; then
            TEST=1
          else
            TEST=0
          fi
          echo "::set-output name=perform-tests::${TEST}"

          if [ ${TEST} == 0 ]; then
            echo "::warning::No test script has been defined in this repository"
          fi

      - name: "Should perform lint"
        id: "should-perform-lint"
        run: |
          if [ -f ./bin/ci/lint.sh ]; then
            LINT=1
          else
            LINT=0
          fi
          echo "::set-output name=perform-lint::${LINT}"

          if [ ${LINT} == 0 ]; then
            echo "::warning::No lint script has been defined in this repository"
          fi
      
      - name: "Get docker image name"
        id: "get-docker-image-name"
        run: |
          DOCKER_IMAGE_NAME=$(yq -e '.services.pylib.image | split(":").0' docker-compose.yaml)
          echo "::set-output name=docker-image-name::$DOCKER_IMAGE_NAME"
        if: >
          steps.should-perform-tests.outputs.perform-tests
          || steps.should-perform-tests.outputs.perform-lint


  ci:
    name: "CI"
    runs-on: "${{ inputs.ci-runs-on }}"
    needs: ["prepare"]
    if: >
      needs.prepare.outputs.perform-tests == 1
      || needs.prepare.outputs.perform-lint == 1

    env:
      DOCKER_TAG: "${{ github.sha }}"
      DOCKER_IMAGE: "${{ needs.prepare.outputs.docker-image-name }}"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set dev docker image metadata"
        id: "docker-metadata"
        uses: "docker/metadata-action@v4"
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ env.DOCKER_TAG }}

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"

      - name: "Should login to GCP Docker Registry"
        id: "should-login-to-gcp-docker-registry"
        run: |
          if grep 'FROM[[:blank:]].\+rtbhouse-apps' Dockerfile > /dev/null; then
            echo "::set-output name=should-login::1"
          fi

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"
          create_credentials_file: true
        if: steps.should-login-to-gcp-docker-registry.outputs.should-login

      - name: "Login to Docker Registry"
        uses: "docker/login-action@v2"
        with:
          registry: "europe-west4-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.gcp-auth.outputs.access_token }}"
        if: steps.should-login-to-gcp-docker-registry.outputs.should-login

      - name: "Add uid and gid env vars"
        id: "set-uid-gid"
        run: |
          echo "::set-output name=uid::`id -u`"
          echo "::set-output name=gid::`id -g`"

      - name: "Build Docker image"
        id: build-docker-image
        uses: "docker/build-push-action@v3"
        with:
          build-args: |
            UID=${{ steps.set-uid-gid.outputs.uid }}
            GID=${{ steps.set-uid-gid.outputs.gid }}
          push: false
          load: true
          tags: "${{ steps.docker-metadata.outputs.tags }}"
          labels: "${{ steps.docker-metadata.outputs.labels }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Lint"
        run: |
          ./bin/ci/lint.sh
        if: needs.prepare.outputs.perform-lint == 1

      - name: "Get config"
        id: "get-config"
        run: |
          ./bin/ci/get_config.sh
        if: >
          needs.prepare.outputs.perform-tests == 1
          && needs.prepare.outputs.get-config == 1
          && (success()
            || (failure()
              && steps.build-docker-image.conclusion == 'success'))

      - name: "Test"
        run: |
          ./bin/ci/test.sh
        if: >
          needs.prepare.outputs.perform-tests == 1
          && (success()
            || (failure()
              && steps.build-docker-image.conclusion == 'success'))

  release-development-package:
    name: "Release development package"
    runs-on: "self-hosted"
    needs: ["prepare"]
    if: "${{ !contains('refs/heads/master refs/heads/main', github.ref) }}"

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout release scripts"
        uses: "actions/checkout@v3"
        with:
          repository: "rtbhouse-apps/github-workflows-pylibs"
          ref: "master"
          path: "github-workflows-pylibs"

      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          path: "pylib"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v0"
        with:
          secrets: |-
            PUBLISH_REPO_CREDENTIALS:projects/rtbhouse-apps/secrets/${{ needs.prepare.outputs.publish-repo-secret }}

      - name: "Setup python ${{ env.PYTHON_VERSION }}"
        uses: "actions/setup-python@v4"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          cache: "pip"

      - name: "Setup poetry ${{ env.POETRY_VERSION }}"
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME="$HOME/.poetry" python - --version ${{ env.POETRY_VERSION }} --force
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: "Configure pip and poetry"
        env:
          PUBLISH_REPO_CREDENTIALS: "${{ steps.secrets.outputs.PUBLISH_REPO_CREDENTIALS }}"
        run: |
          export LOGIN=`jq -r .login <<< ${PUBLISH_REPO_CREDENTIALS}`
          export TOKEN=`jq -r .token <<< ${PUBLISH_REPO_CREDENTIALS}`
          PIP_EXTRA_INDEX_URL=$(echo ${{ needs.prepare.outputs.publish-repo-url }} | sed "s/{LOGIN}/${LOGIN}/" | sed "s/{TOKEN}/${TOKEN}/")
          echo "PIP_EXTRA_INDEX_URL=${PIP_EXTRA_INDEX_URL}" >> $GITHUB_ENV
          poetry config virtualenvs.in-project true
          poetry config repositories.publish-repo "${{ needs.prepare.outputs.publish-repo-upload-url }}"
          poetry config http-basic.publish-repo ${LOGIN} ${TOKEN}

      - name: "Install util packages"
        run: |
          pip install -r github-workflows-pylibs/requirements.txt

      - name: "Assert prod version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py assert-prod-version

      - name: Should publish package
        id: should-publish-package
        run: |
          cd pylib
          if output=$(python ../github-workflows-pylibs/pylib.py assert-version-available 2>&1); then
            echo ::set-output name=publish::1
          else
            if [[ $output == *"Package"*"already exists in repository"* ]]; then
              echo ::set-output name=publish::0
              echo "::warning::Package version in pyproject.toml not bumped, will not publish new package"
            else
              echo $output
              exit 1
            fi
          fi

      - name: "Set next dev version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py set-next-dev-version
        if: steps.should-publish-package.outputs.publish == 1

      - name: "Publish dev package"
        run: |
          cd pylib
          poetry publish --build --no-interaction --repository publish-repo
        if: steps.should-publish-package.outputs.publish == 1

  release-final-package:
    name: "Release final package"
    runs-on: "self-hosted"
    needs: ["prepare", "ci"]
    if: "contains('refs/heads/master refs/heads/main', github.ref)"

    permissions:
      contents: "write"
      id-token: "write"

    steps:
      - name: "Checkout release scripts"
        uses: "actions/checkout@v3"
        with:
          repository: "rtbhouse-apps/github-workflows-pylibs"
          ref: "master"
          path: "github-workflows-pylibs"

      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          path: "pylib"

      - name: "Authenticate to Google Cloud"
        id: "gcp-auth"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/716804851657/locations/global/workloadIdentityPools/github-actions-identity-pool/providers/github-identity-pool-provider"
          service_account: "github-actions@rtbhouse-apps.iam.gserviceaccount.com"

      - name: "Get secrets"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v0"
        with:
          secrets: |-
            PUBLISH_REPO_CREDENTIALS:projects/rtbhouse-apps/secrets/${{ needs.prepare.outputs.publish-repo-secret }}

      - name: "Setup python ${{ env.PYTHON_VERSION }}"
        uses: "actions/setup-python@v4"
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          cache: "pip"

      - name: "Setup poetry ${{ env.POETRY_VERSION }}"
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME="$HOME/.poetry" python - --version ${{ env.POETRY_VERSION }} --force
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: "Configure poetry"
        env:
          PUBLISH_REPO_CREDENTIALS: "${{ steps.secrets.outputs.PUBLISH_REPO_CREDENTIALS }}"
        run: |
          export LOGIN=`jq -r .login <<< ${PUBLISH_REPO_CREDENTIALS}`
          export TOKEN=`jq -r .token <<< ${PUBLISH_REPO_CREDENTIALS}`
          PIP_EXTRA_INDEX_URL=$(echo ${{ needs.prepare.outputs.publish-repo-url }} | sed "s/{LOGIN}/${LOGIN}/" | sed "s/{TOKEN}/${TOKEN}/")
          echo "PIP_EXTRA_INDEX_URL=${PIP_EXTRA_INDEX_URL}" >> $GITHUB_ENV
          poetry config virtualenvs.in-project true
          poetry config repositories.publish-repo "${{ needs.prepare.outputs.publish-repo-upload-url }}"
          poetry config http-basic.publish-repo ${LOGIN} ${TOKEN}

      - name: "Install util packages"
        run: |
          pip install -r github-workflows-pylibs/requirements.txt

      - name: "Assert prod version"
        run: |
          cd pylib
          python ../github-workflows-pylibs/pylib.py assert-prod-version

      - name: Should publish package
        id: should-publish-package
        run: |
          cd pylib
          if output=$(python ../github-workflows-pylibs/pylib.py assert-version-available 2>&1); then
            echo ::set-output name=publish::1
          else
            if [[ $output == *"Package"*"already exists in repository"* ]]; then
              echo ::set-output name=publish::0
              echo "::warning::Package version in pyproject.toml not bumped, will not publish new package"
            else
              echo $output
              exit 1
            fi
          fi

      - name: Get version
        id: get-version
        run: |
          cd pylib
          echo ::set-output name=version::$(poetry version -s)
        if: steps.should-publish-package.outputs.publish == 1

      - name: "Publish final package"
        run: |
          cd pylib
          poetry publish --build --no-interaction --repository publish-repo
        if: steps.should-publish-package.outputs.publish == 1

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: v${{ steps.get-version.outputs.version }}
        if: steps.should-publish-package.outputs.publish == 1
